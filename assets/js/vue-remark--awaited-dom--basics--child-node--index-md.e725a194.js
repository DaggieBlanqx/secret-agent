(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{695:function(e,t,i){"use strict";t.a={name:"VueRemarkRoot",render:function(e){return e("div",null,this.$slots.default)}}},953:function(e,t,i){"use strict";i.r(t);var n=i(1),s=i(695),r=i(0);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}r.a.config.optionMergeStrategies;var a={VueRemarkRoot:s.a},c=function(e){var t=e.options.components=e.options.components||{},i=e.options.computed=e.options.computed||{};Object.keys(a).forEach((function(e){"object"===o(a[e])&&"function"==typeof a[e].render?t[e]=a[e]:i[e]=function(){return a[e]}}))},d=r.a.config.optionMergeStrategies,h="__vueRemarkFrontMatter",l={excerpt:null,title:"ChildNode"};var m=function(e){e.options[h]&&(e.options[h]=l),r.a.util.defineReactive(e.options,h,l),e.options.computed=d.computed({$frontmatter:function(){return e.options[h]}},e.options.computed)},f=Object(n.a)({},(function(){var e=this,t=e.$createElement,i=e._self._c||t;return i("VueRemarkRoot",[i("h1",{attrs:{id:"childnode"}},[i("a",{attrs:{href:"#childnode","aria-hidden":"true"}},[e._v("#")]),e._v("ChildNode")]),i("div",{staticClass:"overview"},[i("span",{staticClass:"seoSummary"},[e._v("The "),i("code",[i("strong",[e._v("ChildNode")])]),e._v(" mixin contains methods and properties that are common to all types of "),i("a",{attrs:{href:"/en-US/docs/Web/API/Node",title:"Node is an interface from which various types of DOM API objects inherit, allowing those types to be treated similarly; for example, inheriting the same set of methods, or being testable in the same way."}},[i("code",[e._v("Node")])]),e._v(" objects that can have a parent.")]),e._v(" It's implemented by "),i("a",{attrs:{href:"/en-US/docs/Web/API/Element",title:"Element is the most general base class from which all element objects (i.e. objects that represent elements) in a Document inherit. It only has methods and properties common to all kinds of elements. More specific classes inherit from Element."}},[i("code",[e._v("Element")])]),e._v(", "),i("a",{attrs:{href:"/en-US/docs/Web/API/DocumentType",title:"The DocumentType interface represents a Node containing a doctype."}},[i("code",[e._v("DocumentType")])]),e._v(", and "),i("a",{attrs:{href:"/en-US/docs/Web/API/CharacterData",title:"The CharacterData abstract interface represents a Node object that contains characters. This is an abstract interface, meaning there aren't any object of type CharacterData: it is implemented by other interfaces, like Text, Comment, or ProcessingInstruction which aren't abstract."}},[i("code",[e._v("CharacterData")])]),e._v(" objects.")]),i("h2",{attrs:{id:"properties"}},[i("a",{attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v("Properties")]),i("ul",{staticClass:"items properties"}),i("h2",{attrs:{id:"methods"}},[i("a",{attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v("Methods")]),i("ul",{staticClass:"items methods"},[i("li",[i("a",{attrs:{href:""}},[e._v("after()")]),i("div",[e._v("Inserts a set of "),i("a",{attrs:{href:"/en-US/docs/Web/API/Node",title:"Node is an interface from which various types of DOM API objects inherit, allowing those types to be treated similarly; for example, inheriting the same set of methods, or being testable in the same way."}},[i("code",[e._v("Node")])]),e._v(" or "),i("a",{attrs:{href:"/en-US/docs/Web/API/DOMString",title:"DOMString is a UTF-16 String. As JavaScript already uses such strings, DOMString is mapped directly to a String."}},[i("code",[e._v("DOMString")])]),e._v(" objects in the "),i("code",[e._v("children")]),e._v(" list of this "),i("code",[e._v("ChildNode")]),e._v("'s parent, just after this "),i("code",[e._v("ChildNode")]),e._v(". "),i("a",{attrs:{href:"/en-US/docs/Web/API/DOMString",title:"DOMString is a UTF-16 String. As JavaScript already uses such strings, DOMString is mapped directly to a String."}},[i("code",[e._v("DOMString")])]),e._v(" objects are inserted as equivalent "),i("a",{attrs:{href:"/en-US/docs/Web/API/Text",title:"The Text interface represents the textual content of Element or Attr. If an element has no markup within its content, it has a single child implementing Text that contains the element's text. However, if the element contains markup, it is parsed into information items and Text nodes that form its children."}},[i("code",[e._v("Text")])]),e._v(" nodes.")])]),i("li",[i("a",{attrs:{href:""}},[e._v("before()")]),i("div",[e._v("Inserts a set of "),i("a",{attrs:{href:"/en-US/docs/Web/API/Node",title:"Node is an interface from which various types of DOM API objects inherit, allowing those types to be treated similarly; for example, inheriting the same set of methods, or being testable in the same way."}},[i("code",[e._v("Node")])]),e._v(" or "),i("a",{attrs:{href:"/en-US/docs/Web/API/DOMString",title:"DOMString is a UTF-16 String. As JavaScript already uses such strings, DOMString is mapped directly to a String."}},[i("code",[e._v("DOMString")])]),e._v(" objects in the "),i("code",[e._v("children")]),e._v(" list of this "),i("code",[e._v("ChildNode")]),e._v("'s parent, just before this "),i("code",[e._v("ChildNode")]),e._v(". "),i("a",{attrs:{href:"/en-US/docs/Web/API/DOMString",title:"DOMString is a UTF-16 String. As JavaScript already uses such strings, DOMString is mapped directly to a String."}},[i("code",[e._v("DOMString")])]),e._v(" objects are inserted as equivalent "),i("a",{attrs:{href:"/en-US/docs/Web/API/Text",title:"The Text interface represents the textual content of Element or Attr. If an element has no markup within its content, it has a single child implementing Text that contains the element's text. However, if the element contains markup, it is parsed into information items and Text nodes that form its children."}},[i("code",[e._v("Text")])]),e._v(" nodes.")])]),i("li",[i("a",{attrs:{href:""}},[e._v("remove()")]),i("div",[e._v("Removes this "),i("code",[e._v("ChildNode")]),e._v(" from the "),i("code",[e._v("children")]),e._v(" list of its parent.")])]),i("li",[i("a",{attrs:{href:""}},[e._v("replaceWith()")]),i("div",[e._v("Replaces this "),i("code",[e._v("ChildNode")]),e._v(" in the "),i("code",[e._v("children")]),e._v(" list of its parent with a set of "),i("a",{attrs:{href:"/en-US/docs/Web/API/Node",title:"Node is an interface from which various types of DOM API objects inherit, allowing those types to be treated similarly; for example, inheriting the same set of methods, or being testable in the same way."}},[i("code",[e._v("Node")])]),e._v(" or "),i("a",{attrs:{href:"/en-US/docs/Web/API/DOMString",title:"DOMString is a UTF-16 String. As JavaScript already uses such strings, DOMString is mapped directly to a String."}},[i("code",[e._v("DOMString")])]),e._v(" objects. "),i("a",{attrs:{href:"/en-US/docs/Web/API/DOMString",title:"DOMString is a UTF-16 String. As JavaScript already uses such strings, DOMString is mapped directly to a String."}},[i("code",[e._v("DOMString")])]),e._v(" objects are inserted as equivalent "),i("a",{attrs:{href:"/en-US/docs/Web/API/Text",title:"The Text interface represents the textual content of Element or Attr. If an element has no markup within its content, it has a single child implementing Text that contains the element's text. However, if the element contains markup, it is parsed into information items and Text nodes that form its children."}},[i("code",[e._v("Text")])]),e._v(" nodes.")])])]),i("h2",{attrs:{id:"events"}},[i("a",{attrs:{href:"#events","aria-hidden":"true"}},[e._v("#")]),e._v("Events")])])}),[],!1,null,null,null);"function"==typeof c&&c(f),"function"==typeof m&&m(f);t.default=f.exports}}]);