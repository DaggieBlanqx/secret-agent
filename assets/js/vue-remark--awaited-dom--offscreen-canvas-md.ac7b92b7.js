(window.webpackJsonp=window.webpackJsonp||[]).push([[147],{695:function(e,t,r){"use strict";t.a={name:"VueRemarkRoot",render:function(e){return e("div",null,this.$slots.default)}}},853:function(e,t,r){"use strict";r.r(t);var a=r(1),n=r(695),s=r(0);function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}s.a.config.optionMergeStrategies;var i={VueRemarkRoot:n.a},u=function(e){var t=e.options.components=e.options.components||{},r=e.options.computed=e.options.computed||{};Object.keys(i).forEach((function(e){"object"===o(i[e])&&"function"==typeof i[e].render?t[e]=i[e]:r[e]=function(){return i[e]}}))},c=s.a.config.optionMergeStrategies,d="__vueRemarkFrontMatter",p={excerpt:null,title:"OffscreenCanvas"};var v=function(e){e.options[d]&&(e.options[d]=p),s.a.util.defineReactive(e.options,d,p),e.options.computed=c.computed({$frontmatter:function(){return e.options[d]}},e.options.computed)},h=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("VueRemarkRoot",[r("h1",{attrs:{id:"offscreencanvas"}},[r("a",{attrs:{href:"#offscreencanvas","aria-hidden":"true"}},[e._v("#")]),e._v("OffscreenCanvas")]),r("div",{staticClass:"overview"},[r("strong",[e._v("This is an "),r("a",{attrs:{href:"/en-US/docs/MDN/Contribute/Guidelines/Conventions_definitions#Experimental"}},[e._v("experimental technology")])]),r("br"),e._v("Check the "),r("a",{attrs:{href:"#Browser_compatibility"}},[e._v("Browser compatibility table")]),e._v(" carefully before using this in production.")]),r("h2",{attrs:{id:"properties"}},[r("a",{attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v("Properties")]),r("h3",{attrs:{id:"height"}},[r("a",{attrs:{href:"#height","aria-hidden":"true"}},[e._v("#")]),e._v(".height "),r("div",{staticClass:"specs"},[r("i",[e._v("W3C")])])]),r("p",[e._v("The height of the offscreen canvas.")]),r("h4",{attrs:{id:"type-superdocument"}},[r("a",{attrs:{href:"#type-superdocument","aria-hidden":"true"}},[e._v("#")]),r("strong",[e._v("Type")]),e._v(": "),r("code",{pre:!0},[e._v("SuperDocument")])]),r("h3",{attrs:{id:"width"}},[r("a",{attrs:{href:"#width","aria-hidden":"true"}},[e._v("#")]),e._v(".width "),r("div",{staticClass:"specs"},[r("i",[e._v("W3C")])])]),r("p",[e._v("The width of the offscreen canvas.")]),r("h4",{attrs:{id:"type-superdocument-1"}},[r("a",{attrs:{href:"#type-superdocument-1","aria-hidden":"true"}},[e._v("#")]),r("strong",[e._v("Type")]),e._v(": "),r("code",{pre:!0},[e._v("SuperDocument")])]),r("h2",{attrs:{id:"methods"}},[r("a",{attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v("Methods")]),r("h3",{attrs:{id:"convertToBlob"}},[r("a",{attrs:{href:"#convertToBlob","aria-hidden":"true"}},[e._v("#")]),e._v(".convertToBlob"),r("em",[e._v("(requestInput, requestInit)")]),r("div",{staticClass:"specs"},[r("i",[e._v("W3C")])])]),r("p",[e._v("Creates a "),r("a",{attrs:{href:"/en-US/docs/Web/API/Blob",title:"A Blob object represents a file-like object of immutable, raw data; they can be read as text or binary data, or converted into a ReadableStream so its methods can be used for processing the data. Blobs can represent data that isn't necessarily in a JavaScript-native format. The File interface is based on Blob, inheriting blob functionality and expanding it to support files on the user's system."}},[r("code",[e._v("Blob")])]),e._v(" object representing the image contained in the canvas.")]),r("h4",{attrs:{id:"arguments"}},[r("a",{attrs:{href:"#arguments","aria-hidden":"true"}},[e._v("#")]),r("strong",[e._v("Arguments")]),e._v(":")]),r("ul",[r("li",[e._v("none")])]),r("h4",{attrs:{id:"returns-promiseresponse"}},[r("a",{attrs:{href:"#returns-promiseresponse","aria-hidden":"true"}},[e._v("#")]),r("strong",[e._v("Returns")]),e._v(": "),r("code",{pre:!0},[e._v("Promise<Response>")])]),r("h3",{attrs:{id:"getContext"}},[r("a",{attrs:{href:"#getContext","aria-hidden":"true"}},[e._v("#")]),e._v(".getContext"),r("em",[e._v("(requestInput, requestInit)")]),r("div",{staticClass:"specs"},[r("i",[e._v("W3C")])])]),r("p",[e._v("Returns a rendering context for the offscreen canvas.")]),r("h4",{attrs:{id:"arguments-1"}},[r("a",{attrs:{href:"#arguments-1","aria-hidden":"true"}},[e._v("#")]),r("strong",[e._v("Arguments")]),e._v(":")]),r("ul",[r("li",[e._v("none")])]),r("h4",{attrs:{id:"returns-promiseresponse-1"}},[r("a",{attrs:{href:"#returns-promiseresponse-1","aria-hidden":"true"}},[e._v("#")]),r("strong",[e._v("Returns")]),e._v(": "),r("code",{pre:!0},[e._v("Promise<Response>")])]),r("h3",{attrs:{id:"transferToImageBitmap"}},[r("a",{attrs:{href:"#transferToImageBitmap","aria-hidden":"true"}},[e._v("#")]),e._v(".transferToImageBitmap"),r("em",[e._v("(requestInput, requestInit)")]),r("div",{staticClass:"specs"},[r("i",[e._v("W3C")])])]),r("p",[e._v("Creates an "),r("a",{attrs:{href:"/en-US/docs/Web/API/ImageBitmap",title:"The ImageBitmap interface represents a bitmap image which can be drawn to a <canvas> without undue latency. It can be created from a variety of source objects using the createImageBitmap() factory method. ImageBitmap provides an asynchronous and resource efficient pathway to prepare textures for rendering in WebGL."}},[r("code",[e._v("ImageBitmap")])]),e._v(" object from the most recently rendered image of the "),r("code",[e._v("OffscreenCanvas")]),e._v(".")]),r("h4",{attrs:{id:"arguments-2"}},[r("a",{attrs:{href:"#arguments-2","aria-hidden":"true"}},[e._v("#")]),r("strong",[e._v("Arguments")]),e._v(":")]),r("ul",[r("li",[e._v("none")])]),r("h4",{attrs:{id:"returns-promiseresponse-2"}},[r("a",{attrs:{href:"#returns-promiseresponse-2","aria-hidden":"true"}},[e._v("#")]),r("strong",[e._v("Returns")]),e._v(": "),r("code",{pre:!0},[e._v("Promise<Response>")])]),r("h2",{attrs:{id:"events"}},[r("a",{attrs:{href:"#events","aria-hidden":"true"}},[e._v("#")]),e._v("Events")])])}),[],!1,null,null,null);"function"==typeof u&&u(h),"function"==typeof v&&v(h);t.default=h.exports}}]);