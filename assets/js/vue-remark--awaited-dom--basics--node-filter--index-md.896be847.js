(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{695:function(e,t,o){"use strict";t.a={name:"VueRemarkRoot",render:function(e){return e("div",null,this.$slots.default)}}},928:function(e,t,o){"use strict";o.r(t);var r=o(1),n=o(695),a=o(0);function s(e){return(s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}a.a.config.optionMergeStrategies;var i={VueRemarkRoot:n.a},d=function(e){var t=e.options.components=e.options.components||{},o=e.options.computed=e.options.computed||{};Object.keys(i).forEach((function(e){"object"===s(i[e])&&"function"==typeof i[e].render?t[e]=i[e]:o[e]=function(){return i[e]}}))},l=a.a.config.optionMergeStrategies,c="__vueRemarkFrontMatter",h={excerpt:null,title:"NodeFilter"};var u=function(e){e.options[c]&&(e.options[c]=h),a.a.util.defineReactive(e.options,c,h),e.options.computed=l.computed({$frontmatter:function(){return e.options[c]}},e.options.computed)},f=Object(r.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("VueRemarkRoot",[o("h1",{attrs:{id:"nodefilter"}},[o("a",{attrs:{href:"#nodefilter","aria-hidden":"true"}},[e._v("#")]),e._v("NodeFilter")]),o("div",{staticClass:"overview"},[e._v("A "),o("strong",[o("code",[e._v("NodeFilter")])]),e._v(" interface represents an object used to filter the nodes in a "),o("a",{attrs:{href:"/en-US/docs/Web/API/NodeIterator",title:"The NodeIterator interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order."}},[o("code",[e._v("NodeIterator")])]),e._v(" or "),o("a",{attrs:{href:"/en-US/docs/Web/API/TreeWalker",title:"The TreeWalker object represents the nodes of a document subtree and a position within them."}},[o("code",[e._v("TreeWalker")])]),e._v(". They don't know anything about the DOM or how to traverse nodes; they just know how to evaluate a single node against the provided filter.")]),o("h2",{attrs:{id:"properties"}},[o("a",{attrs:{href:"#properties","aria-hidden":"true"}},[e._v("#")]),e._v("Properties")]),o("ul",{staticClass:"items properties"}),o("h2",{attrs:{id:"methods"}},[o("a",{attrs:{href:"#methods","aria-hidden":"true"}},[e._v("#")]),e._v("Methods")]),o("ul",{staticClass:"items methods"},[o("li",[o("a",{attrs:{href:""}},[e._v("acceptNode()")]),o("div",[e._v("Returns an "),o("code",[e._v("unsigned short")]),e._v(" that will be used to tell if a given "),o("a",{attrs:{href:"/en-US/docs/Web/API/Node",title:"Node is an interface from which various types of DOM API objects inherit, allowing those types to be treated similarly; for example, inheriting the same set of methods, or being testable in the same way."}},[o("code",[e._v("Node")])]),e._v(" must be accepted or not by the "),o("a",{attrs:{href:"/en-US/docs/Web/API/NodeIterator",title:"The NodeIterator interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order."}},[o("code",[e._v("NodeIterator")])]),e._v(" or "),o("a",{attrs:{href:"/en-US/docs/Web/API/TreeWalker",title:"The TreeWalker object represents the nodes of a document subtree and a position within them."}},[o("code",[e._v("TreeWalker")])]),e._v(" iteration algorithm. This method is expected to be written by the user of a "),o("code",[e._v("NodeFilter")]),e._v(". Possible return values are:\n\t"),o("table",{staticClass:"standard-table"},[o("tbody",[o("tr",[o("td",{staticClass:"header"},[e._v("Constant")]),o("td",{staticClass:"header"},[e._v("Description")])]),o("tr",[o("td",[o("code",[e._v("FILTER_ACCEPT")])]),o("td",[e._v("Value returned by the "),o("a",{attrs:{href:"/en-US/docs/Web/API/NodeFilter/acceptNode",title:"The NodeFilter.acceptNode() method returns an unsigned short that will be used to tell if a given Node must be accepted or not by the NodeIterator or TreeWalker iteration algorithm. This method is expected to be written by the user of a NodeFilter. Possible return values are:"}},[o("code",[e._v("NodeFilter.acceptNode()")])]),e._v(" method when a node should be accepted.")])]),o("tr",[o("td",[o("code",[e._v("FILTER_REJECT")])]),o("td",[e._v("Value to be returned by the "),o("a",{attrs:{href:"/en-US/docs/Web/API/NodeFilter/acceptNode",title:"The NodeFilter.acceptNode() method returns an unsigned short that will be used to tell if a given Node must be accepted or not by the NodeIterator or TreeWalker iteration algorithm. This method is expected to be written by the user of a NodeFilter. Possible return values are:"}},[o("code",[e._v("NodeFilter.acceptNode()")])]),e._v(" method when a node should be rejected. For "),o("a",{attrs:{href:"/en-US/docs/Web/API/TreeWalker",title:"The TreeWalker object represents the nodes of a document subtree and a position within them."}},[o("code",[e._v("TreeWalker")])]),e._v(", child nodes are also rejected. For "),o("a",{attrs:{href:"/en-US/docs/Web/API/NodeIterator",title:"The NodeIterator interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order."}},[o("code",[e._v("NodeIterator")])]),e._v(", this flag is synonymous with FILTER_SKIP.")])]),o("tr",[o("td",[o("code",[e._v("FILTER_SKIP")])]),o("td",[e._v("Value to be returned by "),o("a",{attrs:{href:"/en-US/docs/Web/API/NodeFilter/acceptNode",title:"The NodeFilter.acceptNode() method returns an unsigned short that will be used to tell if a given Node must be accepted or not by the NodeIterator or TreeWalker iteration algorithm. This method is expected to be written by the user of a NodeFilter. Possible return values are:"}},[o("code",[e._v("NodeFilter.acceptNode()")])]),e._v(" for nodes to be skipped by the "),o("a",{attrs:{href:"/en-US/docs/Web/API/NodeIterator",title:"The NodeIterator interface represents an iterator over the members of a list of the nodes in a subtree of the DOM. The nodes will be returned in document order."}},[o("code",[e._v("NodeIterator")])]),e._v(" or "),o("a",{attrs:{href:"/en-US/docs/Web/API/TreeWalker",title:"The TreeWalker object represents the nodes of a document subtree and a position within them."}},[o("code",[e._v("TreeWalker")])]),e._v(' object. The children of skipped nodes are still considered. This is treated as "skip this node but not its children".')])])])])])])]),o("h2",{attrs:{id:"events"}},[o("a",{attrs:{href:"#events","aria-hidden":"true"}},[e._v("#")]),e._v("Events")])])}),[],!1,null,null,null);"function"==typeof d&&d(f),"function"==typeof u&&u(f);t.default=f.exports}}]);